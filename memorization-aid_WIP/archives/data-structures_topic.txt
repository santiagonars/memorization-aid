['What does signed or unsigned numerical data types affect?', 'The specific range of values that the data type contains']
['What is the difference between signed and unsigned data types?', 'Unsigned data types only contains positive values']
['What are primitive types?', 'They are called a basic or value types because they have a fixed size that do not depend on the data inside']
['What is Data Structures?', 'A collection with a defined way of accessing and storing items']
['What are reference types?', 'They use a reference to find where the data lives in memory']
['What is an object?', 'It is used to describe a value in memory referenced by an identifier']
['What is a pointer?', 'A memory address of where data is been stored']
['What is an array?', 'A collection of elements where each item is identified by an index (ex. row of seats at a movie theater)']
['What is a jagged array?', 'A data structure where the number of columns is not fixed. Would need to access the length of each individual array because sizes can be different']
['What is O(1) time?', 'Constant time']
['What is O(n) time?', 'Linear time']
['Wha is Big O Notation?', 'Describe the performance of time complexity of an algorithm']
['What is the time complexity of ACCESSING an array?', 'If we know the index, it is constant time. If we dont know the index, we might need to search the entire data structure which could take linear time']
['What is the time complexity of INSERTING to an array?', 'If the array is big enough, it is constant time because the item will be added to the back of the array. If the array is not big enough, then it is linear time because a new bigger array will be created to store the old data and the new data']
['What is the time complexity of DELETION in an array?', 'If we have the index or just delete from the back of the array, it is constant time. If we do not have the index, it is linear time']
['What happens when SORTING an array?', 'It can take a lot of time. It would depend of how big the data is and the function or sorting algorithm that is been used']
['What is a linked list?', 'A linear data structure in which the elements are not stored at adjacent locations and the elements are linked using pointers']
['What does a node in a linked list contain?', 'Data and a pointer to the next node']
['What is the head?', 'The first node in a linked list']
['How do you know that you have reached the end of a linked list?', 'The pointer value is null']
['What is a double linked list?', 'It has a next and a previous pointer and we can go through the list forward or backward']
['What is a resizable array?', 'Also called a dynamic array or mutable array. Lets you add and remove items without worrying how many slots are initially in the array.']
['When are linked lists better than arrays?', 'In the case where there are a lot of insertions and deletions within the data structure']
['What is the time complexity for INSERTING in a linked list?', 'If order doesnt matter, or its at the back or front of a list, it is constant time']
['Why is the time complexity of ACCESSING, UPDATING, DELETING, and SEARCHING a linked list linear time?', 'Because we have to traverse through the list by following the pointer of each node. The more number of items, the longer it will take']
['How does SORTING work in linked list?', 'Its take time because it has slow random access performance. Use a merge sort!']
['What is a Stack?', 'A series of ordered objects where the last item added will be the first item removed (ex. eating a stack of pancakes). LIFO = Last In, Fist Out']
['What operation is used to add an item to a stack? and what time complexity does it use?', 'Use a PUSH method. It has an O(1) time complexity']
['What operation is used to remove an item from a stack? and what is the time complexity of this operation?', 'Use a POP method. It has an O(1)/constant time complexity']
['What does the peek operation do in a stack? and in a queue?', 'It is to VIEW the first item to be popped in a stack or to VIEW the next item to be dequeue in a queue, without removing it.']
['what is a stack best for?', 'For programs where you need to reverse things, keep track of state or the order of things. Good where you need to add/removed from the back of the structure']
['What is a Queue?', 'a series ordered of objects designed to have elements inserted at the end and elements removed at the beginning (ex. line at the store). FIFO = First In, First Out']
['What operation is used to add an item to a queue? and what is the time complexity of this operation?', 'ENQUEUE an item. It use a constant time complexity']
['What operation is used to remove an item from a queue? and what is the time complexity of this operation?', 'Dequeue an item. It has a constant time complexity']
['When are Stacks and Queues not good to be use for?', 'When you need to access items in the middle of the data structure since items have no index. They are not good for searching or sorting because it would take O(n) time']
['What is an Associative Array? and what are some of its main concepts?', 'A collection of key-value pairs, where the key is unique, values are accessed with the key, and order is not important']
['What are some examples of associate arrays?', 'Dictionaries, maps, and hashes']
['How is an associative array implemented?', 'By using a hash table']
['What is a Hash Table?', 'An implementation of an associative abstract data structure']
['What is hashing? and what is a hashing function used for?', 'It is a data conversion process. A hashing function is used to take some raw data to produce a final hash value (like an integer)']
['What are hash values used for?', 'As a way to get to or store a value in a certain location']
['What is a Bucket in a hash table?', 'It describes a place for each key-value pair to go into in a hash table']
['How do you find the index of a key-value pair in a hash table?', 'The key is used to find a hash value using a hashing function. Then with a modulo operation, the index is obtained by finding the remainder of the hash value by the size of a hash table (Index = hash value % number of buckets in a hash table)']
['What is a benefit of using a hash-based data structure?', 'There is no linear search or transversing because the computations are fixed to find the index of an element']
['What is the time complexity of SEARCH in a hash-based data structure (ex. dictionary)?', 'Constant time (Much faster at searching than any other data structure)']
['What is the time complexity of INSERTION / DELETION in a hash-based data structure (ex. dictionary)?', 'Constant time']
['How does sorting work in a hash-based data structure (ex. dictionary)?', 'There is no real sorting']
['What is Collision?', 'When two keys share the same hash value']
['In what situations are hash-based data structures better at than arrays?', 'Hash tables are excellent in a situations where you have key-value pairs and the data is volatile']
['Why is collision bad?', 'Because separate chaining is needed to handle it, which is like a linked list for each bucket that has collision, resulting in a linear time complexity']
['What is a Set?', 'It is an abstract data structure. It is collection of unique items where order doesnt matter']
['What is a Set only good for and why? and what is it not good for?', 'Only good for membership, when you need to constantly check if a certain value exists in the set and do not need duplicate values. A set is not good when needing to retrieve data because there is no key or any specific value to look up']
['What is a tree? and what is the parent node? and what is the child node? what is the root?', 'A collection of nodes where the starting node is called the root node. The nodes linked to the root node are called the child nodes, where the root node is the parent node']
['What is a node with no children called?', 'A leaf']
['What are child nodes that share the same parent called?', 'Siblings']
['What is a binary search tree (BST)?', 'A specialized type of tree structure with a constraint that each node has two child nodes']
['What are the three main rules(constraints) that represent a Binary Search Tree?', '(1) the left child node is less than the parent, (2) the right child node is greater than the parent, (3) and the tree must always stay sorted']
['What is a Binary Search Tree (BST) used for?', 'To sort key-value pairs']
['What are Binary Search Trees (BTS) great at?', 'To keep keys of a hash table in a sorted order']
['What is an unbalanced tree? And why is it bad?', 'When there are more levels of nodes on one side of the tree than the other. It can result in having more checks to search, insert, and delete.']
['What is a Heap?', 'It is data structure implemented as a binary tree with a constraint that items are added top to bottom, left to right']
['What is a binary tree?', 'A specialized type of tree structure with a constraint that each node has two child nodes']
['What happens a min heap?', 'The lowest number bubbles up to the top of the data structure']
['What happens in a max heap?', 'The highest number bubbles up to the top of the tree structure']
['Why does a heap tree structure never become unbalanced?', 'Because a level of the tree is completely filled before moving onto the next']
['Is a heap a fully sorted data structure? and why?', 'No, because values do not have a specific order. We can only make sure that the minimum and the maximum value will be at the top.']
['What is a Priority Queue?', 'A data structure implemented by a heap, where all we care about is the next item to run']
['What are heaps be used for?', 'To implement priority queues']
['What is the time complexity to find the Min/Max value in a heap?', 'Constant time / O(1)']
['What is the time complexity of INSERTING in a heap? and why?', 'O(Log(n)) time because it could end up doing log(n) swaps for elements to bubble up the tree']
['What is the time complexity of SEARCHING in a heap? and why?', 'Linear time because it needs to scan all elements without order']
['What is the time complexity of DELETION in a heap? and why?', 'Linear time time to search and delete the elements. Deletion itself can take O(log(n)) time to swap items']
['What operations is a Binary Search Tree (BTS) fast at and under what conditions?', 'It is fast to maintain sorted order to search, insert, delete, and access an item']
['What is the time complexity of a balanced Binary Search Tree (BST)?', 'It takes O(log(n)) time because with every node encounter, half the tree is eliminated']
['What is the time complexity of an unbalanced Binary Search Tree (BST)? and why?', 'It takes linear time because each node could all be one side of the tree']
